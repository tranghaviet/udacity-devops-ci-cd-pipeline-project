name: Frontend CD

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on push events on the main branch
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: frontend
  K8S_CLUSTER: cluster
  K8S_NAMESPACE: default
  K8S_DEPLOYMENT_NAME: movie-deployment

# Jobs defined in the workflow
jobs:
  linting-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache node modules
        id: cache-npm # use later to check if cache hit
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.cache-name }}-
            ${{ runner.os }}-node-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install the dependencies.
        run: npm i

      - name: Run the linter.
        run: npm run lint

  testing-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache node modules
        id: cache-npm # use later to check if cache hit
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.cache-name }}-
            ${{ runner.os }}-node-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install the dependencies.
        run: npm ci

      - name: Run the tests.
        run: npm run test

      - name: Build Docker image
        run: docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
  build-job:
    needs: [linting-job, testing-job]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache node modules
        id: cache-npm # use later to check if cache hit
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.cache-name }}-
            ${{ runner.os }}-node-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install the dependencies.
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Build Docker image
        run: docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .

  deploy-job:
    needs: [build-job]
    runs-on: ubuntu-latest
    environment:
      name: staging

    steps:
    # - name: Set short git commit SHA
    #   id: commit
    #   uses: prompt/actions-commit-hash@v2

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      # run: docker push ${{ env.ECR_REPOSITORY }}:${{ steps.commit.outputs.short }}
      run: docker push ${{ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
