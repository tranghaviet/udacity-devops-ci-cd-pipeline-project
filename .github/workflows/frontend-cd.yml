name: Frontend CD

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on push events on the main branch
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/actions/frontend/**'
      - '.github/workflows/frontend-ci.yml'
      - '.github/workflows/frontend-cd.yml'

defaults:
  run:
    working-directory: ./frontend

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: frontend
  K8S_CLUSTER: cluster

# Jobs defined in the workflow
jobs:
  ci-workflow:
    uses: ./.github/workflows/frontend-ci.yml

  deploy-job:
    needs: [ci-workflow]
    runs-on: ubuntu-latest
    environment:
      name: staging

    steps:
    # - name: Set short git commit SHA
    #   id: commit
    #   uses: prompt/actions-commit-hash@v2

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Restore Docker image from cache
      id: restore-image
      uses: actions/cache/restore@v3
      env:
        cache-name: cache-frontend-image
      with:
        path: /tmp/frontend.tar.gz
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.sha }}

    - name: Load or build Docker image
      run: |
        if [ ${{ steps.restore-image.outputs.cache-hit != 'true' }} ]; then
          echo "Docker image not found, building..."
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t ${{ vars.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
        else
          gunzip -c /tmp/frontend.tar.gz | docker load
        fi

    - name: Push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      # run: docker push ${{ env.ECR_REPOSITORY }}:${{ steps.commit.outputs.short }}
      run: docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: Set up Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.29.0'

    # - name: Install AWS IAM Authenticator
    #   run: |
    #     curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
    #     chmod +x ./aws-iam-authenticator
    #     sudo mv aws-iam-authenticator /usr/local/bin

    - name: Connect to EKS Cluster
      run: aws eks update-kubeconfig --name ${{ env.K8S_CLUSTER }} --region ${{ env.AWS_REGION }}

    - name: Set the image tag to the newer version
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: kubectl kustomize edit set image frontend=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: Apply the manifests to the cluster
      run: |
        cd k8s
        kubectl kustomize build | kubectl apply -f -

    # - name: Deploy to Kubernetes
    #   # might fall into compatibility issues that will be hard to detect
    #   run: kubectl apply -k k8s

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: Deploy frontend successfully
